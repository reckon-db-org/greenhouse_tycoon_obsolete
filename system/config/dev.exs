import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :greenhouse_tycoon_web, GreenhouseTycoonWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "Qi0vKN1poug2+j/TA7IA1ge+AZNggAXteEvTwh2n5+i8KhZCF/WbyMFOVbn3cMHt",
  watchers: [
    esbuild:
      {Esbuild, :install_and_run, [:greenhouse_tycoon_web, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:greenhouse_tycoon_web, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :greenhouse_tycoon_web, GreenhouseTycoonWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/regulate_greenhouse_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :greenhouse_tycoon_web, dev_routes: true

# Include MFA metadata for better debugging in development logs
config :logger, :console,
  format: "$time [$level] $metadata$message\n",
  metadata: [:mfa],
  level: :debug

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Configure specific modules' log levels - only show errors
# Cache population configuration for development
# Enable automatic cache population on startup - useful for development
# config :greenhouse_tycoon, :populate_cache_on_startup, true

# Individual apps configure their own ExESDB and Commanded settings
# App-specific configs are imported through the umbrella config.exs

# Configure ExESDB for greenhouse_tycoon development
config :greenhouse_tycoon, :ex_esdb,
  store_id: :greenhouse_tycoon,
  data_dir: "data/greenhouse_tycoon",
  pub_sub: :ex_esdb_pubsub,
  db_type: :single,
  timeout: 15_000,
  reader_idle_ms: 10_000,
  writer_idle_ms: 10_000

# Override libcluster configuration for single-node development
# Since this is running as an umbrella app on a single node,
# we disable clustering to avoid connection attempts to non-existent nodes
config :libcluster,
  topologies: []

# Configure EmitterPool settings for development
config :ex_esdb, :emitter_pools,
  pool_size: 2,
  max_overflow: 4,
  eager_start: true

# Suppress OS monitoring warnings
config :os_mon,
  start_cpu_sup: false,
  start_disksup: false,
  start_memsup: false

# Ensure temp directory exists
File.mkdir_p!("data/greenhouse_tycoon")

config :logger,
  compile_time_purge_matching: [
    # Swarm modules - only show errors
    [module: Swarm.Distribution.Ring, level_lower_than: :error],
    [module: Swarm.Distribution.Strategy, level_lower_than: :error],
    [module: Swarm.Registry, level_lower_than: :error],
    [module: Swarm.Tracker, level_lower_than: :error],
    [module: Swarm.Distribution.StaticQuorumRing, level_lower_than: :error],
    [module: Swarm.Distribution.Handler, level_lower_than: :error],
    [module: Swarm.IntervalTreeClock, level_lower_than: :error],
    [module: Swarm.Logger, level_lower_than: :error],
    [module: Swarm, level_lower_than: :error]
  ]
